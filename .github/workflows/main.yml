name: CI
on: [push, pull_request]

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - i686-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - arm-unknown-linux-gnueabi
          - x86_64-apple-darwin
          - aarch64-apple-darwin
          - x86_64-pc-windows-gnu
          - x86_64-pc-windows-msvc
          - wasm32-unknown-emscripten
          - wasm32-wasip1
        lua: [lua54, lua53, lua52, lua51]

        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: i686-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: arm-unknown-linux-gnueabi
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: wasm32-unknown-emscripten
            os: ubuntu-latest
          - target: wasm32-wasip1
            os: ubuntu-latest
            lua: lua51-wasi
    steps:
      - uses: actions/checkout@main
      - uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}
      - name: Install GCC (i686-unknown-linux-gnu)
        if: ${{ matrix.target == 'i686-unknown-linux-gnu' }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends gcc-multilib
        shell: bash
      - name: Install GCC (aarch64-unknown-linux-gnu)
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends gcc-aarch64-linux-gnu libc6-dev-arm64-cross
        shell: bash
      - name: Install GCC (arm-unknown-linux-gnueabi)
        if: ${{ matrix.target == 'arm-unknown-linux-gnueabi' }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends gcc-arm-linux-gnueabi libc6-dev-armel-cross
        shell: bash
      - name: Install GCC (x86_64-pc-windows-gnu)
        if: ${{ matrix.target == 'x86_64-pc-windows-gnu' }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends gcc-mingw-w64-x86-64
        shell: bash
      - name: Install emscripten (wasm32-unknown-emscripten)
        if: ${{ matrix.target == 'wasm32-unknown-emscripten' }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends emscripten
        shell: bash
      - name: Install WASI SDK and wasm-opt (wasm32-wasip1)
        if: ${{ matrix.target == 'wasm32-wasip1' }}
        run: |
          wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-27/wasi-sdk-27.0-x86_64-linux.tar.gz
          tar xf wasi-sdk-27.0-x86_64-linux.tar.gz
          sudo mv wasi-sdk-27.0-x86_64-linux /opt/wasi-sdk
          # Install wasm-opt for post-processing
          wget https://github.com/WebAssembly/binaryen/releases/download/version_118/binaryen-version_118-x86_64-linux.tar.gz
          tar xf binaryen-version_118-x86_64-linux.tar.gz
          sudo cp binaryen-version_118/bin/wasm-opt /usr/local/bin/
        shell: bash
      - name: Build ${{ matrix.lua }}
        run: |
          if [[ "${{ matrix.target }}" == "wasm32-wasip1" ]]; then
            export WASI_SDK=/opt/wasi-sdk
            cargo build --manifest-path testcrate/Cargo.toml --target ${{ matrix.target }} --release --features lua51-wasi
            echo "Note: For real applications, run wasm-opt on the final .wasm binary with --translate-to-exnref -O2"
          else
            cargo build --manifest-path testcrate/Cargo.toml --target ${{ matrix.target }} --release --features ${{ matrix.lua }}
          fi
        shell: bash

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        lua: [lua54, lua53, lua52, lua51]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@main
      - uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}
      - name: Run ${{ matrix.lua }} tests
        run: |
          cargo test --manifest-path testcrate/Cargo.toml --release --features ${{ matrix.lua }}
        shell: bash

  test_standalone:
    name: Test
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@main
      - uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}
      - name: Run standalone tests
        run: |
          cargo test

  test_emscripten:
    name: Test emscripten
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        lua: [lua54, lua53, lua52, lua51]
    steps:
      - uses: actions/checkout@main
      - uses: dtolnay/rust-toolchain@stable
        with:
          target: wasm32-unknown-emscripten
      - name: Install emscripten
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends emscripten
        shell: bash
      - name: Run ${{ matrix.lua }} tests
        run: |
          export CARGO_TARGET_WASM32_UNKNOWN_EMSCRIPTEN_RUNNER=node
          cargo test --manifest-path testcrate/Cargo.toml --release --features ${{ matrix.lua }}
        shell: bash

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - run: cargo fmt -- --check
